package ed448

import (
	"crypto"
	"crypto/rand"

	agl25519 "github.com/agl/ed25519"
	"golang.org/x/crypto/ed25519"

	. "gopkg.in/check.v1"
)

func testPoint() *homogeneousProjective {
	p, _ := newPoint([]byte{
		0x9f, 0x93, 0xed, 0x0a, 0x84, 0xde, 0xf0,
		0xc7, 0xa0, 0x4b, 0x3f, 0x03, 0x70, 0xc1,
		0x96, 0x3d, 0xc6, 0x94, 0x2d, 0x93, 0xf3,
		0xaa, 0x7e, 0x14, 0x96, 0xfa, 0xec, 0x9c,
		0x70, 0xd0, 0x59, 0x3c, 0x5c, 0x06, 0x5f,
		0x24, 0x33, 0xf7, 0xad, 0x26, 0x6a, 0x3a,
		0x45, 0x98, 0x60, 0xf4, 0xaf, 0x4f, 0x1b,
		0xff, 0x92, 0x26, 0xea, 0xa0, 0x7e, 0x29,
	}, []byte{0x13})
	return p
}

func (s *Ed448Suite) BenchmarkPointIsOnCurve(c *C) {
	p := testPoint()
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		p.OnCurve()
	}
}

func (s *Ed448Suite) BenchmarkPointDouble(c *C) {
	p := testPoint()

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		p = p.double()
	}

	c.Assert(p.OnCurve(), Equals, true)
}

func (s *Ed448Suite) BenchmarkPointUnifiedAddition(c *C) {
	p := testPoint()

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		p = p.add(p)
	}

	c.Assert(p.OnCurve(), Equals, true)
}

func (s *Ed448Suite) BenchmarkGenerateKey(c *C) {
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.generateKey(rand.Reader)
	}
}

func (s *Ed448Suite) BenchmarkComputeSecret(c *C) {
	k, err := curve.generateKey(rand.Reader)
	c.Assert(err, IsNil)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.computeSecret(k.secretKey(), k.publicKey())
	}
}

func (s *Ed448Suite) BenchmarkSign(c *C) {
	msg := []byte("hey there")
	k := privateKey([privKeyBytes]byte{
		//secret
		0x1f, 0x44, 0xfd, 0x2e, 0xde, 0x47, 0xca, 0xa8,
		0x7c, 0x4c, 0x45, 0x88, 0x1a, 0x7e, 0x01, 0x5a,
		0xa9, 0x01, 0x37, 0xfb, 0x0d, 0xbe, 0xb9, 0xe0,
		0xeb, 0x47, 0x29, 0xf7, 0x74, 0x0b, 0x5c, 0x23,
		0x66, 0xaa, 0xfd, 0x39, 0x03, 0x38, 0x78, 0x80,
		0x8f, 0xb2, 0x06, 0x13, 0x4e, 0xfb, 0xcf, 0x02,
		0x11, 0x43, 0x11, 0x3a, 0xd1, 0xf8, 0xb8, 0x22,

		//public
		0x0e, 0xe8, 0x29, 0x1c, 0xc5, 0x9d, 0x51, 0x9c,
		0xb2, 0x94, 0xdd, 0xc4, 0x5c, 0xb9, 0xf7, 0x0f,
		0xd1, 0xd9, 0x3e, 0x4c, 0x45, 0x55, 0x15, 0x70,
		0x84, 0x4d, 0x2e, 0x18, 0xad, 0x99, 0xc4, 0xf9,
		0xfe, 0xc7, 0xe8, 0x6f, 0x5c, 0xda, 0xac, 0xe9,
		0x55, 0xff, 0x42, 0x75, 0x52, 0x6c, 0x04, 0xb6,
		0xe1, 0xc8, 0x49, 0xb9, 0xc1, 0x86, 0x37, 0xd0,

		//symmetric
		0x27, 0x54, 0xcd, 0xa7, 0x12, 0x98, 0x88, 0x3d,
		0x4e, 0xf5, 0x11, 0x23, 0x92, 0x74, 0xb8, 0xa7,
		0xef, 0x7e, 0x51, 0x7e, 0x31, 0x28, 0xd4, 0xf7,
		0xfc, 0xfd, 0x9c, 0x62, 0xff, 0x65, 0x09, 0x65,
	})

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.sign(msg, &k)
	}
}

func (s *Ed448Suite) BenchmarkVerify(c *C) {
	msg := []byte("hey there")
	sk := privateKey([privKeyBytes]byte{
		//secret
		0x1f, 0x44, 0xfd, 0x2e, 0xde, 0x47, 0xca, 0xa8,
		0x7c, 0x4c, 0x45, 0x88, 0x1a, 0x7e, 0x01, 0x5a,
		0xa9, 0x01, 0x37, 0xfb, 0x0d, 0xbe, 0xb9, 0xe0,
		0xeb, 0x47, 0x29, 0xf7, 0x74, 0x0b, 0x5c, 0x23,
		0x66, 0xaa, 0xfd, 0x39, 0x03, 0x38, 0x78, 0x80,
		0x8f, 0xb2, 0x06, 0x13, 0x4e, 0xfb, 0xcf, 0x02,
		0x11, 0x43, 0x11, 0x3a, 0xd1, 0xf8, 0xb8, 0x22,

		//public
		0x0e, 0xe8, 0x29, 0x1c, 0xc5, 0x9d, 0x51, 0x9c,
		0xb2, 0x94, 0xdd, 0xc4, 0x5c, 0xb9, 0xf7, 0x0f,
		0xd1, 0xd9, 0x3e, 0x4c, 0x45, 0x55, 0x15, 0x70,
		0x84, 0x4d, 0x2e, 0x18, 0xad, 0x99, 0xc4, 0xf9,
		0xfe, 0xc7, 0xe8, 0x6f, 0x5c, 0xda, 0xac, 0xe9,
		0x55, 0xff, 0x42, 0x75, 0x52, 0x6c, 0x04, 0xb6,
		0xe1, 0xc8, 0x49, 0xb9, 0xc1, 0x86, 0x37, 0xd0,

		//symmetric
		0x27, 0x54, 0xcd, 0xa7, 0x12, 0x98, 0x88, 0x3d,
		0x4e, 0xf5, 0x11, 0x23, 0x92, 0x74, 0xb8, 0xa7,
		0xef, 0x7e, 0x51, 0x7e, 0x31, 0x28, 0xd4, 0xf7,
		0xfc, 0xfd, 0x9c, 0x62, 0xff, 0x65, 0x09, 0x65,
	})

	pk := publicKey([pubKeyBytes]byte{
		//public
		0x0e, 0xe8, 0x29, 0x1c, 0xc5, 0x9d, 0x51, 0x9c,
		0xb2, 0x94, 0xdd, 0xc4, 0x5c, 0xb9, 0xf7, 0x0f,
		0xd1, 0xd9, 0x3e, 0x4c, 0x45, 0x55, 0x15, 0x70,
		0x84, 0x4d, 0x2e, 0x18, 0xad, 0x99, 0xc4, 0xf9,
		0xfe, 0xc7, 0xe8, 0x6f, 0x5c, 0xda, 0xac, 0xe9,
		0x55, 0xff, 0x42, 0x75, 0x52, 0x6c, 0x04, 0xb6,
		0xe1, 0xc8, 0x49, 0xb9, 0xc1, 0x86, 0x37, 0xd0,
	})

	signature, err := curve.sign(msg, &sk)
	c.Assert(err, IsNil)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		curve.verify(signature, msg, &pk)
	}
}

func (s *Ed448Suite) BenchmarkKaratsuba(c *C) {
	x, _ := deserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	y, _ := deserialize(serialized{
		0x74, 0xa8, 0xbc, 0x39, 0x4b, 0x75, 0xd2,
		0x58, 0x2f, 0x2d, 0x90, 0x82, 0xc3, 0xf3,
		0x47, 0x76, 0xc8, 0xbd, 0x0b, 0x68, 0xe1,
		0xc0, 0xb9, 0x14, 0x3b, 0x87, 0x4a, 0xd8,
		0x7d, 0xd1, 0x80, 0x65, 0x63, 0x78, 0x76,
		0xbf, 0x89, 0x7e, 0xff, 0x1e, 0x8b, 0xc1,
		0x3d, 0xaa, 0xcf, 0x9f, 0x0d, 0x3c, 0x36,
		0x72, 0x33, 0x7a, 0xd5, 0x74, 0x81, 0xf5,
	})

	result := new(bigNumber)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		karatsubaMul(result, x, y)
	}
}

func (s *Ed448Suite) BenchmarkKaratsubaSquare(c *C) {
	x, _ := deserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	result := new(bigNumber)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		karatsubaSquare(result, x)
	}
}

func (s *Ed448Suite) BenchmarkStrongReduce(c *C) {
	x, _ := deserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		x.strongReduce()
	}
}

func (s *Ed448Suite) BenchmarkWeakReduce(c *C) {
	x, _ := deserialize(serialized{
		0xf5, 0x81, 0x74, 0xd5, 0x7a, 0x33, 0x72,
		0x36, 0x3c, 0x0d, 0x9f, 0xcf, 0xaa, 0x3d,
		0xc1, 0x8b, 0x1e, 0xff, 0x7e, 0x89, 0xbf,
		0x76, 0x78, 0x63, 0x65, 0x80, 0xd1, 0x7d,
		0xd8, 0x4a, 0x87, 0x3b, 0x14, 0xb9, 0xc0,
		0xe1, 0x68, 0x0b, 0xbd, 0xc8, 0x76, 0x47,
		0xf3, 0xc3, 0x82, 0x90, 0x2d, 0x2f, 0x58,
		0xd2, 0x75, 0x4b, 0x39, 0xbc, 0xa8, 0x74,
	})

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		x.weakReduce()
	}
}

func (s *Ed448Suite) BenchmarkEd25519GenerateKey(c *C) {
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		ed25519.GenerateKey(rand.Reader)
	}
}

func (s *Ed448Suite) BenchmarkEd25519Sign(c *C) {
	msg := []byte("hey there")
	private := ed25519.PrivateKey{
		0xa5, 0x41, 0xb0, 0x40, 0xb5, 0x39, 0xea, 0x8c,
		0xfb, 0x63, 0xbc, 0x57, 0x63, 0x37, 0x3b, 0x5b,
		0x5f, 0xff, 0x49, 0xcf, 0x83, 0xb0, 0x3b, 0x1e,
		0x52, 0xbe, 0x66, 0xd1, 0x9b, 0x77, 0x22, 0xc4,
		0xdf, 0xcf, 0x96, 0xf5, 0xb9, 0xb5, 0x36, 0x42,
		0xf4, 0x12, 0xe7, 0x4d, 0x86, 0xf5, 0x7c, 0xd1,
		0x3c, 0xfd, 0xfd, 0xe7, 0xf6, 0x29, 0x1a, 0x2b,
		0x83, 0xf3, 0x80, 0xdd, 0x11, 0xc6, 0xb7, 0x08,
	}

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		private.Sign(rand.Reader, msg, crypto.Hash(0))
	}
}

func (s *Ed448Suite) BenchmarkEd25519Verify(c *C) {
	msg := []byte("hey there")
	private := ed25519.PrivateKey{
		0xa5, 0x41, 0xb0, 0x40, 0xb5, 0x39, 0xea, 0x8c,
		0xfb, 0x63, 0xbc, 0x57, 0x63, 0x37, 0x3b, 0x5b,
		0x5f, 0xff, 0x49, 0xcf, 0x83, 0xb0, 0x3b, 0x1e,
		0x52, 0xbe, 0x66, 0xd1, 0x9b, 0x77, 0x22, 0xc4,
		0xdf, 0xcf, 0x96, 0xf5, 0xb9, 0xb5, 0x36, 0x42,
		0xf4, 0x12, 0xe7, 0x4d, 0x86, 0xf5, 0x7c, 0xd1,
		0x3c, 0xfd, 0xfd, 0xe7, 0xf6, 0x29, 0x1a, 0x2b,
		0x83, 0xf3, 0x80, 0xdd, 0x11, 0xc6, 0xb7, 0x08,
	}
	public := ed25519.PublicKey{
		0xdf, 0xcf, 0x96, 0xf5, 0xb9, 0xb5, 0x36, 0x42,
		0xf4, 0x12, 0xe7, 0x4d, 0x86, 0xf5, 0x7c, 0xd1,
		0x3c, 0xfd, 0xfd, 0xe7, 0xf6, 0x29, 0x1a, 0x2b,
		0x83, 0xf3, 0x80, 0xdd, 0x11, 0xc6, 0xb7, 0x08,
	}

	sig, err := private.Sign(rand.Reader, msg, crypto.Hash(0))
	c.Assert(err, IsNil)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		ed25519.Verify(public, msg, sig)
	}
}

func (s *Ed448Suite) BenchmarkAglEd25519GenerateKey(c *C) {
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		agl25519.GenerateKey(rand.Reader)
	}
}

func (s *Ed448Suite) BenchmarkAglEd25519Sign(c *C) {
	msg := []byte("hey there")
	private := [agl25519.PrivateKeySize]byte{
		0xa5, 0x41, 0xb0, 0x40, 0xb5, 0x39, 0xea, 0x8c,
		0xfb, 0x63, 0xbc, 0x57, 0x63, 0x37, 0x3b, 0x5b,
		0x5f, 0xff, 0x49, 0xcf, 0x83, 0xb0, 0x3b, 0x1e,
		0x52, 0xbe, 0x66, 0xd1, 0x9b, 0x77, 0x22, 0xc4,
		0xdf, 0xcf, 0x96, 0xf5, 0xb9, 0xb5, 0x36, 0x42,
		0xf4, 0x12, 0xe7, 0x4d, 0x86, 0xf5, 0x7c, 0xd1,
		0x3c, 0xfd, 0xfd, 0xe7, 0xf6, 0x29, 0x1a, 0x2b,
		0x83, 0xf3, 0x80, 0xdd, 0x11, 0xc6, 0xb7, 0x08,
	}

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		agl25519.Sign(&private, msg)
	}
}

func (s *Ed448Suite) BenchmarkAglEd25519Verify(c *C) {
	msg := []byte("hey there")
	private := [agl25519.PrivateKeySize]byte{
		0xa5, 0x41, 0xb0, 0x40, 0xb5, 0x39, 0xea, 0x8c,
		0xfb, 0x63, 0xbc, 0x57, 0x63, 0x37, 0x3b, 0x5b,
		0x5f, 0xff, 0x49, 0xcf, 0x83, 0xb0, 0x3b, 0x1e,
		0x52, 0xbe, 0x66, 0xd1, 0x9b, 0x77, 0x22, 0xc4,
		0xdf, 0xcf, 0x96, 0xf5, 0xb9, 0xb5, 0x36, 0x42,
		0xf4, 0x12, 0xe7, 0x4d, 0x86, 0xf5, 0x7c, 0xd1,
		0x3c, 0xfd, 0xfd, 0xe7, 0xf6, 0x29, 0x1a, 0x2b,
		0x83, 0xf3, 0x80, 0xdd, 0x11, 0xc6, 0xb7, 0x08,
	}
	public := [agl25519.PublicKeySize]byte{
		0xdf, 0xcf, 0x96, 0xf5, 0xb9, 0xb5, 0x36, 0x42,
		0xf4, 0x12, 0xe7, 0x4d, 0x86, 0xf5, 0x7c, 0xd1,
		0x3c, 0xfd, 0xfd, 0xe7, 0xf6, 0x29, 0x1a, 0x2b,
		0x83, 0xf3, 0x80, 0xdd, 0x11, 0xc6, 0xb7, 0x08,
	}

	sig := agl25519.Sign(&private, msg)

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		agl25519.Verify(&public, msg, sig)
	}
}

func (s *Ed448Suite) Benchmark_DecafDeriveKeys(c *C) {
	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		decafCurve.decafGenerateKeys(rand.Reader)
	}
}

func (s *Ed448Suite) Benchmark_NonsecretDoubleScalarMul(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x00072b34, 0x04cec1fd, 0x0b774a9e, 0x084c12be,
			0x09df1d27, 0x0bc62b68, 0x0de2e768, 0x04065602,
			0x0ee70363, 0x02e055d7, 0x0cad9837, 0x0407046e,
			0x00703cca, 0x0f6ef606, 0x063e8dc3, 0x0776e6f5,
		},
		&bigNumber{
			0x0d6c1848, 0x0f0324cd, 0x014242b8, 0x09f852ab,
			0x0e2f0ae2, 0x0c5d36f8, 0x04bfc5f3, 0x0cd63634,
			0x0130a623, 0x0d223af6, 0x092fc448, 0x09593241,
			0x07f7537f, 0x0b279102, 0x092c9008, 0x0770f54a,
		},
		&bigNumber{
			0x04e0613f, 0x0562a7b6, 0x023d3869, 0x0ce22dd2,
			0x05c38536, 0x09ffc9e4, 0x0ee3e256, 0x0e2ea4ea,
			0x04319ce4, 0x00ace113, 0x0d244dad, 0x074ce218,
			0x07da5dd8, 0x00e32306, 0x08380e45, 0x0c59c082,
		},
		&bigNumber{
			0x0dab45d1, 0x0b5695af, 0x04992870, 0x0ffa9aed,
			0x0310dbf3, 0x01db0840, 0x07021034, 0x05e1b6a7,
			0x06bc1536, 0x0b80411b, 0x095fa6b7, 0x0a604dae,
			0x0dd00bad, 0x026f3675, 0x0da08945, 0x090dca5e,
		},
	}

	a := &scalar{
		0xd9436800, 0x1290c087, 0x33c051b3, 0xf9e8460f,
		0xfcbb9385, 0x78d7514f, 0x41ca69be, 0xafd5666e,
		0xac3e587b, 0xcd707df7, 0x084a91cd, 0x1f398369,
		0xf5ca959a, 0x1be183fc,
	}

	b := &scalar{
		0x2378c292, 0x216cc272, 0xc44edb49, 0xffffffff,
		0xffffffff, 0xffffffff, 0x3fffffff, 0x2378c292,
		0x216cc272, 0xc44edb49, 0x31430f14, 0xffffffff,
		0xffffffff, 0x3fffffff,
	}

	c.ResetTimer()
	for i := 0; i < c.N; i++ {
		decafDoubleNonSecretScalarMul(p, a, b)
	}
}

func (s *Ed448Suite) Benchmark_SecretDoubleScalarMul(c *C) {
	p := &twExtendedPoint{
		&bigNumber{
			0x00072b34, 0x04cec1fd, 0x0b774a9e, 0x084c12be,
			0x09df1d27, 0x0bc62b68, 0x0de2e768, 0x04065602,
			0x0ee70363, 0x02e055d7, 0x0cad9837, 0x0407046e,
			0x00703cca, 0x0f6ef606, 0x063e8dc3, 0x0776e6f5,
		},
		&bigNumber{
			0x0d6c1848, 0x0f0324cd, 0x014242b8, 0x09f852ab,
			0x0e2f0ae2, 0x0c5d36f8, 0x04bfc5f3, 0x0cd63634,
			0x0130a623, 0x0d223af6, 0x092fc448, 0x09593241,
			0x07f7537f, 0x0b279102, 0x092c9008, 0x0770f54a,
		},
		&bigNumber{
			0x04e0613f, 0x0562a7b6, 0x023d3869, 0x0ce22dd2,
			0x05c38536, 0x09ffc9e4, 0x0ee3e256, 0x0e2ea4ea,
			0x04319ce4, 0x00ace113, 0x0d244dad, 0x074ce218,
			0x07da5dd8, 0x00e32306, 0x08380e45, 0x0c59c082,
		},
		&bigNumber{
			0x0dab45d1, 0x0b5695af, 0x04992870, 0x0ffa9aed,
			0x0310dbf3, 0x01db0840, 0x07021034, 0x05e1b6a7,
			0x06bc1536, 0x0b80411b, 0x095fa6b7, 0x0a604dae,
			0x0dd00bad, 0x026f3675, 0x0da08945, 0x090dca5e,
		},
	}

	a := &scalar{
		0xd9436800, 0x1290c087, 0x33c051b3, 0xf9e8460f,
		0xfcbb9385, 0x78d7514f, 0x41ca69be, 0xafd5666e,
		0xac3e587b, 0xcd707df7, 0x084a91cd, 0x1f398369,
		0xf5ca959a, 0x1be183fc,
	}

	b := &scalar{
		0x2378c292, 0x216cc272, 0xc44edb49, 0xffffffff,
		0xffffffff, 0xffffffff, 0x3fffffff, 0x2378c292,
		0x216cc272, 0xc44edb49, 0x31430f14, 0xffffffff,
		0xffffffff, 0x3fffffff,
	}

	c.ResetTimer()

	for i := 0; i < c.N; i++ {
		doubleScalarMul(BasePoint, p, a, b)
	}
}
