// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.361kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdb\x6e\xeb\x3a\x7a\xbe\x9f\xa7\xe0\x78\xf6\xc2\x72\x9a\x44\xb2\x1d\xe7\xb0\x12\x3b\x53\xd9\xb1\x73\x74\xe2\xf8\x90\xd3\xc2\xc2\x80\x92\x28\x89\xb1\x44\xca\x24\x65\x5b\xc9\x18\x98\x17\x28\xda\x62\x7a\xd3\xce\xc5\x06\xe6\x62\x7a\x3b\x45\x6f\xfa\x3c\xfb\x05\xba\x1f\xa1\x20\x25\xf9\x98\x95\xb5\xd0\x99\x29\xba\x81\xad\x25\x91\x3f\x7f\x7e\xff\x91\x3f\xff\xb8\xf2\xcb\x93\x9b\x7a\xef\xb1\xdd\x00\x9e\x08\xfc\xe3\x5f\x54\xe4\x3f\xc0\x87\xc4\xad\xe6\x10\xc9\xc9\x01\x04\xed\xe3\x5f\x00\x50\x09\x90\x80\xc0\x13\x22\xdc\x46\xc3\x08\x8f\xaa\xb9\x3a\x25\x02\x11\xb1\xdd\x8b\x43\x94\x03\x56\xf2\x55\xcd\x09\x34\x11\xba\x64\x73\x04\x2c\x0f\x32\x8e\x44\xb5\xdf\x6b\x6e\x1f\xe4\xe6\x5c\xb2\xf1\x5c\x24\x9c\xa5\x09\x02\x03\x54\xcd\x8d\x30\x1a\x87\x94\x89\x05\xa6\x63\x6c\x0b\xaf\x6a\xa3\x11\xb6\xd0\xb6\xfa\xd8\x02\x98\x60\x81\xa1\xbf\xcd\x2d\xe8\xa3\x6a\x31\x61\x23\xb0\xf0\xd1\xf1\xeb\xab\x76\x8d\xc4\x98\xb2\x41\x4f\x7e\x4f\xa7\xe0\xe7\x1f\xff\xed\xcf\xa0\x4e\x19\x02\x46\x24\x3c\x44\x04\xb6\xa0\x40\x36\x68\xc2\xc8\x42\xa2\xa2\x27\xeb\x24\x07\x1f\x93\x01\x60\xc8\xaf\xe6\xb8\x88\x7d\xc4\x3d\x84\x44\x0e\x78\x0c\x39\xd5\x9c\x14\x9f\x1f\xea\xba\x65\x13\xed\x99\xdb\xc8\xc7\x23\xa6\x11\x24\x74\xd7\xd3\x2d\x16\x87\x82\x7a\x91\xb9\x6d\x63\x17\x0b\xe8\xeb\x16\xb5\xe8\xdf\x17\xb5\xa2\x56\xd6\x6d\xcc\x85\x6e\x71\xae\xc6\xb4\x00\x13\xcd\xe2\x3c\x07\x30\x11\xc8\x65\x58\xc4\xd5\x1c\xf7\xe0\xce\x41\x79\x9b\x9e\x35\xac\xda\xb3\x19\x5c\x19\x2f\xa7\xa5\xf3\x31\x1e\xee\xd7\x0a\xcf\xd7\xe3\xfd\xc0\xdf\x6b\x92\xe7\x6e\xf0\x89\x3f\x5e\xef\x62\xde\xbe\xb4\xef\xcd\x89\x7f\x31\x74\x4d\xbd\x58\xaa\xbb\x9d\x9b\x72\xe7\xb2\x57\xba\x37\x72\xc0\x62\x94\x73\xca\xb0\x8b\x49\x35\x07\x09\x25\x71\x40\x23\x9e\x03\xfa\x5c\xba\x44\x18\x1b\x0a\x78\x88\x03\xe8\x22\x3d\x24\xee\x91\x09\x39\xda\x2b\x6f\xe1\xbb\xda\x4d\x67\x5c\xb8\x3c\x75\xa9\x61\x18\xc6\x75\xb7\xef\x35\xfa\xae\x61\x18\x75\xf9\x69\xb8\x75\xe3\xd1\x30\x8c\xda\x0b\x22\xac\x20\x07\xea\x0f\xb5\xf3\xfb\x87\x96\x61\x18\xbc\x6b\x18\xc6\x55\xc3\x3d\xeb\xee\x3c\xec\x1f\xc8\x29\xaf\xe1\x37\x6e\xef\x3a\x8f\x9e\x75\xf7\x10\x97\x77\xcc\x56\xad\xf6\xa9\xe1\x40\x64\x5f\x9d\xa0\xfa\x70\xd2\x6f\x18\x8e\xdb\xe9\x4d\x76\x2f\x0f\xbc\xa8\x56\xa0\xcd\x7e\x2f\x1c\x5f\x52\xaf\x77\x6b\xde\x3e\x1c\x74\xcf\xdd\xae\xeb\xa0\x7a\x70\xb1\xc3\x2f\x99\x31\xee\xc6\xa7\x27\x83\x9d\x36\xbe\xbe\x0d\x6e\x6b\xfb\x6e\xbd\x50\x1c\xee\xb8\x2f\x8e\xd3\x7e\x1e\xa2\x93\x31\xae\x1d\x98\x4f\xd7\xe3\xda\xbd\x5e\x1f\xed\x7e\xda\x1d\xb6\xdb\xee\x45\xd9\x60\xc6\x49\xab\xdd\xb9\x2b\x96\x9e\x3e\x35\x1b\xf5\xae\x7b\xd6\x2c\x19\xd0\xa8\x71\xa3\xdc\x0a\x9f\x8d\x7a\xc9\xb8\x7a\xfc\xd4\xbc\xdf\x71\x5e\x1a\xb5\x72\x3c\x7e\xd2\xc3\x1e\x7b\x7e\xac\x77\xba\xbd\xee\x4b\xfd\xac\x5e\xae\x8d\x4f\xae\x46\x2f\x06\x2a\x63\xbb\xc9\x2f\x37\xf7\xc2\xf8\xb6\x56\x2e\xbd\x5c\x4c\x48\xfb\x84\xdc\x8e\xba\x71\x97\x06\x56\xff\xd1\x2d\xec\xb4\xf7\xfa\xad\xd1\xfe\x6d\x68\x94\xf7\xc7\x35\xeb\xe2\x60\x0f\x0d\x4c\x7c\x79\xcd\x6e\x7b\x13\x1c\xb4\x7a\x77\x9f\x8a\xfc\xbe\xd1\xbe\x0f\x36\x5b\x3c\xee\x6e\x9e\x1c\x0c\xd1\xc5\xa3\x78\xd9\xef\xd8\x37\x8d\xde\xc9\x4d\x63\x14\x8d\x62\x7e\xda\x76\xec\x3b\x71\xf1\x3c\xde\x77\xcd\x76\x70\x57\xba\x32\x59\x5f\xbf\xbb\xd4\xc7\x17\xa3\x7b\xd3\x1d\x0d\x37\xf7\xcc\xc7\xfd\x49\xad\x56\x2e\x8f\xc9\x68\xb3\xdc\xef\xb8\xe7\xdc\xd2\x47\x07\xb5\xf2\xbe\xf1\x6c\x6f\x16\x8b\x8e\xdd\x13\x21\x8f\xed\xdb\xba\x7e\x60\x87\xed\x17\x1f\x5e\xdf\xb5\x4a\xd1\xc8\x1f\xf4\xee\xc7\xf8\xf9\x76\x70\x39\xda\x6c\x19\xd7\x9b\x4f\x17\x27\x2f\xd7\xd1\xc5\xad\xdf\x2d\x35\x45\xaf\x36\x20\xcd\xd6\x78\x6f\x32\xc4\x0d\x67\xb0\x3b\x29\x0d\xbb\xad\xc6\xa6\x7b\xd9\xe4\x57\x7b\x93\x87\xe2\xc4\xe7\x71\xf8\x5c\xb3\x6e\x4e\x4f\x9d\x87\xf1\xc3\xfd\x8e\xdf\x1c\x40\xa3\x4b\x1e\xc2\xbe\x17\xde\xb4\x3a\xd7\xf1\x89\x77\xb5\xbb\x7f\x70\xd6\xdd\xdc\x6c\x71\x5d\xd4\xcf\xbb\x86\x67\x4f\xf4\xfa\x75\x83\x97\xfb\x35\xd3\x9a\xe8\x07\x66\x3d\x0a\x36\x9b\xa6\xf9\x74\x5b\x36\xe3\x97\xbb\x2b\x38\x6c\xdc\x19\xf5\x11\xba\xef\xc7\xfc\xac\xef\xdf\xdf\x91\x33\x76\xef\xd6\xbb\x65\x58\xda\xbf\xba\xd8\xa9\x5d\x76\x6f\xfb\x6c\xc2\x0a\xf8\xf6\x92\x74\xf7\x5d\x1a\x0d\x9e\x2e\x48\xb3\x7c\x7f\x0e\x0f\x5a\x62\x78\xf7\xf2\xd8\xde\xb9\xec\x0d\xd0\xf0\xec\xba\xd6\xec\x84\x51\x8c\xa2\xcd\x66\xa3\xbe\x53\x1a\x89\x3b\xbd\x14\x53\xbb\xd8\xbd\x79\xd9\x3f\x77\x26\x4d\x07\x9a\x93\xda\xd5\xed\x7d\xd7\xdf\xbb\x1b\x5a\xcd\xee\x6d\xe9\x72\x2f\x1a\x9e\x8d\x06\xae\x69\xd4\x58\xf9\x22\xd8\xf4\xdc\xd3\x4d\xe1\x79\xa3\xe6\x7d\xcb\xd9\x6f\xde\x14\xfb\x0d\xbc\x7f\x8f\x6b\xdd\xa1\xee\xee\x34\x4a\x9d\xf2\x09\x42\xad\x12\xea\x6e\xb6\x9f\xce\xed\x4e\xa3\x5d\xbb\x1e\x7e\x9a\xf4\x9d\x33\xb7\xeb\x5f\xed\x7b\xcd\x62\x39\xd8\x3d\x38\x2d\x94\x4f\x0b\x5e\xef\xc0\xee\xd0\x66\x70\xde\xaa\x0f\xf6\x9e\x6e\xfa\x77\x4e\xaf\xe9\xc0\x28\xae\x3f\x74\xea\x7b\xe7\x66\xbd\xe4\x0f\xdb\x34\x7e\xf4\x9a\x42\x3f\x38\x7b\x7e\x3a\x3b\x1f\xc4\x3b\x03\xf3\x9a\xc4\x23\x6b\x72\x30\xac\x4d\xf6\x9f\x2f\x4a\xce\xe5\x0d\xfc\xf4\x1c\x79\x8f\xdd\xe0\xee\xe9\xbe\xde\xe9\x0c\xfb\xcf\x07\xd7\xa7\x45\x72\x62\x9e\xc0\x1a\x36\xc6\x61\x3b\xd8\x7d\xdc\xfc\x34\x68\xd6\x0f\x6a\x23\xbb\x61\xb1\x5e\x57\x2f\x5d\x4e\x1e\x55\x60\x76\xfb\x77\x37\x9d\xcb\xdd\xfa\xe3\xf9\x79\x35\x97\xe4\x2f\x6c\x51\x92\x03\x22\x0e\x51\x35\x37\x8b\xf3\x2c\x11\x70\x8b\xe1\x50\x00\xce\xac\xa5\xb4\xf6\xcc\x35\xcb\xa7\x91\xed\xf8\x90\x21\xcd\xa2\x81\x0e\x9f\xe1\x44\xf7\xb1\xc9\xf5\xe7\x61\x84\x58\xac\xef\x68\xbb\x5a\x21\xfd\x50\xa9\xec\x79\x2d\x93\x95\x76\xf7\xb6\x27\xd7\x2f\xd7\x25\x58\xf6\xc5\xa0\x56\x2e\xb7\x2c\xfd\xe2\x65\x27\xec\x95\x71\xbf\x68\x05\xa8\x53\x68\x0e\x1e\x78\x39\x64\x91\x7e\x31\x81\xb7\xd5\xaf\x66\xad\xe3\x8a\x9e\x00\xfd\xcb\x30\x6f\x13\x2a\x62\xbd\xa4\x95\xb5\x62\x06\x5c\x8e\xbc\x83\x5e\x1f\xf8\xa4\x7c\x82\x4f\xce\x6a\x05\xe7\xe9\xac\x6f\xf7\xd1\x53\x2d\xde\x7f\x78\xe8\xb5\x2e\x6e\x0e\x1e\xcb\xce\xe6\xe9\x5d\x19\x89\xc2\xa4\x74\xdb\xfa\x1b\xa2\x0f\x68\x80\x88\xd0\x9e\xb9\x5e\xd2\x4a\x65\xad\x90\x0d\x7c\x1d\x77\x19\xdf\x3e\xed\xd5\xee\xae\xca\xc3\xeb\x4b\xff\xb6\xb4\xdf\x6b\x4c\x1a\x5e\xed\xba\x78\xd6\x6c\x8f\x8c\x91\xd1\x32\x9b\x70\x74\x79\x49\x79\xf7\xfe\xfb\xb5\x2e\x8f\x41\xf9\x06\x80\xe6\x21\x46\xc1\xab\x7a\x07\x20\x80\xcc\xc5\x64\xdb\xa4\x42\xd0\xe0\x10\x14\xb5\x5d\x14\x1c\xa9\xb9\xa9\x7a\xda\x78\xa4\x41\xdb\x66\x88\xf3\xaf\xad\x29\x68\xfb\x6f\xac\x09\x68\x44\xc4\x57\xb7\x59\x5e\x00\x4d\x93\xcd\x48\x43\xca\xb1\xc0\x94\x1c\xca\x00\x80\x02\x8f\xd0\x51\x3a\x63\x45\x8c\x53\x76\x08\x3c\xe4\x87\xab\xcb\x0f\x3d\x3a\x42\xec\xf0\x10\x3a\x02\xbd\xc5\x0b\x9a\x9c\xfa\x91\x98\xf1\x9a\x21\x29\x14\x3e\x64\x63\xaa\x26\x39\x04\xa5\x42\x86\x0e\x80\x10\xda\x36\x26\xee\x02\x62\x00\x4c\x68\x0d\x5c\x46\x23\x62\x1f\x82\x5f\x39\x8e\x33\x83\x97\x14\x3a\x87\x00\x0a\xc1\xf2\xaa\x18\xd9\xc8\xe6\x5e\xb6\x31\xb1\xd1\xe4\x10\x14\xe7\x00\x98\x8d\xd8\x21\xd8\x09\x27\x80\xb9\x66\x7e\xbf\xbc\x05\x92\xff\x37\x80\x4d\x85\x40\xf6\x5c\xc4\x8a\x9e\xda\xaf\xa2\x27\xa5\x5c\xc5\xa4\x76\x0c\x2c\x1f\x72\x5e\xcd\x79\x90\x6f\x73\x81\xad\x41\xbc\xed\x50\x2a\x10\x4b\x8b\x31\x88\x49\x62\xf1\x0a\x47\x96\xd4\xc2\x6c\x81\x74\x00\xcc\xb7\x43\x86\x03\xc8\xe2\xdc\x71\x0a\xa9\x62\xe3\xd1\x22\xcd\xb6\xdc\x65\x36\xbb\x3c\x2f\x85\x85\x98\xa4\x9b\xcd\x28\xbc\x62\x46\xa0\xe4\x5f\x9a\x04\x49\xed\x56\xf3\xa9\x35\xb0\x3c\x88\x49\x5a\xb8\xa9\xba\x6e\x91\x89\xee\x15\x97\x99\x96\x32\xa6\x3c\x32\xdf\xe2\x3b\x2f\x15\xa7\xd3\x37\x6b\xc3\x65\xee\xa5\x05\x91\x74\x1b\x8f\x66\xf2\xcf\x3f\x2a\x7a\xaa\xb3\x65\x0d\xbe\xa5\xa9\xb7\x34\x51\x59\xe0\xba\x4a\x9f\x46\xd3\x8a\x08\x15\x1f\x9a\xc8\x07\x0e\x65\xd5\x1c\xa7\x16\x86\x7e\x2e\x5b\xa0\x66\x72\xc7\x5d\x35\x0a\x48\x22\x28\xe8\x33\xff\xf5\x15\x3b\x40\xbb\xa6\x52\xe2\xe9\x14\xfc\x16\xdc\x43\xdf\x47\xe2\xf5\x15\x11\x7b\x3a\xad\xe8\x6a\xe1\xca\x36\x0b\x40\x1c\x8c\x7c\x1b\x48\xef\x81\xb6\x4d\xc9\x2a\xa2\x75\x29\x19\xf5\xa5\xdb\xa0\x49\x08\x89\x8d\xec\x35\x7a\x00\x2a\x98\x84\x91\x00\xd8\x5e\x13\x42\x4d\x64\x07\x99\xbc\x5e\xe4\x40\xe8\x43\x0b\x79\xd4\xb7\x11\x9b\x27\xd3\x9f\x7e\xf7\xa7\x35\xb1\xea\x35\x35\xaa\xa4\x4a\x8f\xbe\xa5\x4d\xf5\x15\x6d\x7f\x05\xfb\x5b\x78\x61\x46\x63\x46\x42\x50\x22\xc5\xe3\x91\x65\x49\xfb\x00\x4a\x2c\x1f\x5b\x83\x6a\x4e\x01\xfa\x41\xeb\x20\x0b\x86\xc2\xf2\xe0\x74\xea\xb2\xec\x5d\x43\x13\x64\x45\x02\xe5\x37\x5e\x5f\x91\xcf\xd1\x74\xca\x23\x33\xc0\x22\xff\xfa\xfa\x03\xb6\x27\xd3\xe9\x46\x06\x7c\x7d\x77\x00\x9a\x11\xb1\x41\x80\xd6\x71\xe9\xf0\x3b\xa4\x7c\x6b\x28\x9c\x07\xb0\x1f\xbe\xe5\x34\x20\xf5\x57\x4c\x5c\x10\xd3\x88\x25\x41\xb9\x14\x41\x89\x1b\x81\xd4\x51\x57\xcc\x41\xd9\xca\x3c\xc0\x82\x23\xdf\x99\x79\x5d\xb8\xe4\xf8\xab\x10\x97\x22\x41\x9d\x11\xef\x04\x42\x42\x30\xcb\x53\x2b\x01\x61\xa8\xd9\x6f\xba\xf9\xd7\xac\xff\xfa\xca\x20\x71\x11\x90\x66\xda\x02\x3f\xa4\x07\xd6\x61\x15\x68\x09\x63\x3e\x9d\xae\x9a\x20\x81\x96\xf2\x65\xd0\xc6\xf4\xfd\x18\x58\xc5\x9f\x78\x7f\xb2\x30\xbd\x27\x0b\x8c\xd8\x1b\x3e\x2d\xe1\xa5\x90\xa6\x53\xf0\xf9\xf5\x55\x1d\x1f\xe0\x07\xad\x8d\x18\xa6\x36\x07\x89\x73\x7d\x59\x73\x92\x37\x94\x21\x79\x29\xdb\xbc\xef\x3c\x6b\x03\x89\xe1\x17\xbc\x7e\x51\xab\xee\xf6\x2c\x04\x72\x40\xde\x42\xb7\x39\x16\x68\x80\x62\x19\x2e\x8b\x8b\xd2\x59\x0b\xfa\xbe\x3c\x38\x55\x0e\x0f\xb0\x98\x2d\x7a\x91\x85\x2d\x19\x61\x8e\x4d\x99\xd7\x13\x14\xab\x80\x57\xb0\x2d\x02\xe1\x02\x8a\xe5\xd4\xb5\x38\x2b\xa0\xcb\x01\x64\x68\x3b\x40\x36\x8e\x82\x55\x5f\xe3\x21\x24\x0b\xa4\xb9\xe3\x9f\x7f\xfc\xc3\x9f\xd3\x61\x69\xc0\x10\x21\x96\x94\x52\x21\x24\xc7\x40\x7d\xa6\x1f\xdf\x64\xf4\xef\xff\xb1\xc0\xc8\x94\x87\xde\x9c\x91\xfa\xfc\x6e\x4e\x3f\xfe\x71\x81\x93\x13\x11\x7b\x01\x92\x45\x19\xfa\x7e\x48\xff\xb9\xc2\x48\x26\xf1\x8c\x53\xf2\xbd\xce\x6a\x55\xf7\x2b\x9f\x1e\x9b\x7b\xef\x5f\xf7\x00\x5d\x9c\x47\x44\xc8\xdc\xfc\x86\x15\x2b\x5e\xe9\xf8\x8c\x8e\x81\x4d\x11\x07\x4e\x52\x50\xc8\x3c\xf6\xeb\xe5\x83\x5e\xa6\xc6\x65\x05\xf5\x3c\x3c\x5b\x80\x39\x60\x11\x51\x39\x91\x12\x20\xbc\x95\x84\x98\xa6\x4f\x0d\xf4\x28\x08\x19\x1a\x49\x34\x01\xf4\xb1\x85\x69\xc4\x01\xb4\x04\x65\x1c\x38\x8c\x06\x00\x4d\x3c\x18\x71\x21\x19\x41\xdf\x07\x70\x04\xb1\x0f\x4d\x1f\x29\xed\x72\x99\x3c\xa1\x65\x45\x41\x24\x0b\x5b\xe2\x02\x44\x68\xe4\x7a\x2a\x05\x73\x20\x28\x48\x72\x90\x4f\x89\x3b\xc3\xc3\x43\x18\xc8\x8a\x12\x5a\x03\xbe\x05\x18\x1a\x46\x88\x0b\xe5\xd3\x40\x60\x64\xcb\x55\x16\x0d\x02\x4a\xc0\x0e\xb3\x41\x08\x99\x88\x01\x5f\xce\xfa\xd0\xb2\x54\x42\xd3\x80\x41\x62\x4a\x10\xf0\xe0\x48\x21\x04\xbd\x31\x16\xb2\x5e\xa6\x0c\x34\xa1\x85\x4c\x4a\x67\xd4\x20\x80\x71\xb6\x5d\x8a\x7e\x8c\x85\x87\x13\xf5\x84\x88\x05\x72\xa9\x0d\x7c\x1c\x60\xc1\xb5\x25\x87\x59\x3e\x02\xa2\xd5\xe4\xec\xe3\xb5\xc3\x8d\x0b\x46\x89\x7b\xfc\xf3\x8f\xff\xf4\xaf\xe0\x14\x0b\x2f\x32\x81\x8b\xb9\x90\x85\xaf\x9a\x90\x9a\x5f\x06\x33\xc2\x70\x91\x72\x0b\x04\x70\x80\x00\x94\x47\xfa\x72\x9f\x4f\xce\x6a\xae\xa2\x94\x37\xb3\x1c\x10\x90\xb9\x48\x54\x73\xbf\x31\x7d\x48\x06\xb9\xe3\x30\x32\x7d\x6c\xa5\xfb\xc1\x63\x25\xe6\xc2\xd1\x98\x1d\x73\x21\xe4\x52\x5e\x4c\x04\x55\x2a\x48\xdd\x92\x83\x3c\x8f\x98\xba\x0e\x48\x9d\xca\xd2\x46\xf9\x22\xf9\x28\x55\x28\xb5\xbb\xa1\x55\x4c\xa6\x1f\xd7\x69\x18\x6f\x2b\x26\x6a\x79\x45\x5d\x7a\x54\x35\x5b\xcd\xd5\x65\xa1\x91\xb9\xde\xc7\x3a\x43\x50\x20\xb0\x80\xeb\x23\x80\xc4\x06\x16\x0d\x63\x75\x84\x43\x9b\x29\x48\xca\xe5\x14\x52\x93\xd1\x31\x97\x11\x24\xa9\x25\x4d\x45\x97\xfc\x8f\xe7\x70\xa1\x49\x47\x08\x24\x67\x93\x49\x27\x8a\xa1\x83\xa5\x7c\x63\x18\xff\x72\xe5\x68\x58\xb5\xd0\xfb\x26\xfb\x53\xe6\x47\xdf\x30\x57\x4a\xf5\x75\x53\x89\x84\x40\x5d\xa0\xb1\xd2\xae\x2e\xc6\x08\x89\x5f\x4b\xad\x56\x3b\x09\x43\x4c\xdc\x0f\xa5\x42\x12\xb8\xf2\x45\xb2\xff\x50\x2a\x48\x41\x3f\x94\x0a\x13\xab\xf8\xa1\x51\xfa\x70\x50\xf8\x60\xec\x7d\x28\x15\x28\xf9\x50\x2a\x08\x0f\x7d\x28\x15\x3e\x94\x76\x16\x83\x3a\x19\x91\x16\x96\x14\x88\x4b\x5e\x59\x9c\xaf\xfb\x88\x82\xf1\xff\xc2\x3b\x5a\xaa\x7b\x90\x9a\x8f\xd8\xb2\xfa\x02\xfd\xce\x15\x48\x03\x33\xc3\x63\x42\x06\xa8\x93\x00\x1d\x23\x33\x73\x90\x2d\x19\xea\x34\x44\x09\x71\x80\x48\x94\xf1\x15\x34\x04\x0c\xbb\x9e\x90\xcb\xe6\x1b\x6d\x25\x9e\xa7\x10\x48\x8c\x40\x35\x9f\x95\x90\x98\xa7\x7a\xe1\xff\xc7\x0e\xf7\xcf\xff\x30\xcb\x56\xdf\xf0\xb8\x8c\x6c\x2b\x09\x26\xee\x01\x08\x08\x1a\x83\x0a\x0a\xd2\xb0\xaf\xe8\x28\x38\x06\x21\xe5\xe2\x6b\x96\x45\x81\x89\x6c\xfb\x0d\xdb\xfe\xd5\x4d\xdb\x96\x28\x7a\x38\x40\x5c\xc0\x20\xcc\xec\x30\x4b\xcc\x0a\xe4\xdc\x1a\x94\x24\x06\xb9\x92\x06\x31\xb2\x4b\xa5\x24\xfa\x1b\xd8\x63\xf9\x12\xf0\xfd\xa6\xfa\x97\xdf\x83\x7b\x2c\x3c\x1a\x09\x00\xe7\xf7\x72\x4c\xc9\x3b\x86\x93\xc6\x19\x7f\x65\x11\x0a\x8e\xb7\x00\xc7\x41\xe8\xc7\x2a\x1d\xa6\x7a\x5d\xb7\xda\x77\x8a\xad\x0c\xa4\x2a\x81\x80\xda\x48\xd6\x01\x3c\xe2\x16\x0a\x85\xac\x46\xa5\x9b\xd7\xe2\x17\x48\x04\x26\x28\x3b\x83\xb5\x6f\x6a\x6a\xb5\xd6\xae\xe8\x8b\x27\xe0\x77\x75\x1c\x2a\x7a\xd6\xbd\xa9\x24\x2d\x9d\x94\xe6\xdd\xaa\x69\x79\xd6\x8f\x02\xc2\x65\xcd\xe4\xc2\xd0\x5f\xee\x37\xac\x13\xaa\x6e\x50\xd2\xea\xf2\x57\x7b\x13\x99\x31\x17\x9a\x35\x73\xe3\x49\x5b\xbd\x91\xc8\x65\x55\x6a\xce\xfa\x3c\x9a\x65\xad\x67\xd4\x95\x5e\x90\xca\xad\x4e\xfa\x87\x3c\x14\x7c\xbd\xde\xfc\x16\x76\xd5\xd0\x90\xc1\xb8\x9d\x64\x33\xcc\xb7\x3d\x6c\xdb\x88\x6c\x0b\x1a\x59\xde\x8a\x68\x01\xf4\xfd\xe3\x9f\xfe\xf0\xfb\xff\xfe\xaf\x7f\x04\x75\x4a\x08\xb2\x84\xaa\xa9\x0e\xc1\xda\x9f\x1f\x2b\x7a\x42\xfd\xde\x0d\x69\x89\xf7\x42\xfd\x3d\x07\x61\x23\x3e\x10\x34\xdc\xa6\xc4\x8f\xdf\xbb\x8d\xd8\x78\x84\x6d\x69\xdc\x9f\x7e\xf7\xc7\xb7\xcb\x7b\x05\x26\x64\x54\x24\x98\x4d\x59\xad\xd5\x13\x20\x6f\x40\x5d\xe7\xf1\xee\x1d\x6b\xc9\x31\xd3\xd7\x8a\x3e\xf7\xc5\xca\xbc\xb7\x0c\x80\xae\x83\x53\x9f\x9a\xd0\x07\x23\xc8\xb0\x2c\x77\x55\x31\xeb\x51\xdf\x4e\xf2\x65\xc4\x98\xcc\x97\xf2\xaa\x16\xf1\x2c\xaf\x39\xf3\xce\xdc\x08\x32\x19\x5e\x28\x08\x05\xa8\x82\xc2\xd1\x6c\x90\x23\x36\x42\x6c\xfe\x2d\x6f\xcb\xcb\x14\xb3\x82\xb8\x0a\x3e\x7f\x39\xfa\x45\x86\xa7\x4e\xc9\x08\x31\x01\x48\x14\x98\x88\x49\x34\x04\x5b\x88\x01\x87\xb2\x00\xce\x37\xed\x9e\xff\xa6\xfb\xd8\xaa\xdd\x5c\xfd\xa6\xf1\xd0\x93\x2c\x72\xb9\x2d\x90\x1b\xc8\x47\x4b\x3e\x4e\xe5\xa3\x27\x1f\x6d\xf9\x68\xc8\xc7\x93\x7c\x3c\xca\x47\x47\x3e\x6e\x73\xd9\xb6\x4e\x44\x92\x36\xab\x4c\xbc\x68\x84\xa1\x40\xd7\x6a\xfb\x7c\x82\x62\x63\xd6\x96\x96\x5b\xfb\x68\x84\x7c\x50\x05\x2d\x28\x3c\xcd\xa7\x6e\xb1\x30\x23\xd3\xc1\x0e\xf8\x6d\x26\x24\x00\xd8\xc9\xa7\xc4\x55\x50\xd8\x00\x0c\x89\x88\x91\x54\xb2\xa3\x05\x8e\x3c\x72\x1c\x3c\x01\xd5\x65\xa9\x3e\xab\xb5\x5f\x96\x08\x2d\xe8\xa3\x6c\xeb\x90\x8e\xf3\xc5\xc2\x56\x8a\xe7\xef\xc0\xce\xc6\x1a\xa9\x0d\xaa\x99\x22\xf5\x64\x24\x23\x49\xb1\x24\x54\x9a\xa0\x4d\x3c\x41\x76\xbe\xb4\x01\x36\x53\x34\x59\x0f\x3b\xb3\xcb\x09\x72\x54\x2e\x9d\x2b\x4b\x78\x50\x00\x4b\x55\xbc\x1c\x58\x3e\xe5\x51\x7a\x17\xb2\x19\x0d\x81\x74\xa1\xcc\xc4\x33\xab\xc9\x99\x50\x39\x42\xc6\x25\xef\x41\xee\xcd\xf5\x9b\xc2\x9a\xcd\xce\x67\x80\xf4\x00\x90\x97\x5c\x70\xb5\x70\x04\x70\x25\xe3\xae\xf9\x88\xb8\xc2\x3b\x02\x78\x73\x73\x91\x5e\xea\x1f\xe4\x33\xaa\xcf\xf8\x8b\x26\x26\x9a\xdc\x4e\x9a\x63\x79\xdb\x6c\xf3\x94\x21\x0f\x7d\x6c\xa1\x3c\xde\x02\xc5\x99\x4e\x93\xff\x4c\x86\xe0\x60\x71\x68\x1e\x85\xd9\x5b\xf2\xef\xf4\x68\x55\x73\x2a\x72\x96\x74\x97\xf4\x53\x38\x80\xea\xa6\x00\x22\xe6\x83\xf4\xe8\x4b\xa2\x67\x1e\x4c\x8a\x70\x51\x6b\x6b\xf9\x2b\x7d\x49\x53\xc3\x5c\xb2\x84\x93\xc6\x11\xb1\xf3\x17\xdd\x9b\x6b\x8d\x0b\x86\x89\x8b\x9d\x38\xff\x1a\x31\xff\x10\xfc\x90\xcf\xfd\x2a\xed\xf8\x6e\x7c\x2e\x7c\xd1\x46\xd0\x8f\xd0\x96\x8a\x57\x35\xa9\xce\xdf\xcf\xaa\xe5\xf5\x51\x0e\x7e\xfc\x72\x68\x79\xc8\x1a\x20\x3b\xb7\x21\x89\xf3\x1b\x6b\x58\xb6\x40\xfa\x7a\x08\x96\x61\x4d\x37\x66\xea\x5c\x5b\xb4\xd0\x98\x65\x88\x23\x91\xdf\x38\x5a\xcc\x73\xeb\xfa\x84\x20\x40\xc2\xa3\xea\x1e\xcd\x90\x95\x1c\x01\x20\x0a\x29\x49\x85\x06\x3e\xe5\x7c\x21\xdd\x64\x24\xd5\xb7\xdc\x2b\x5d\x52\x55\x45\xe6\x3d\x32\xbb\xd4\x1a\x20\x91\xcf\xe7\xc7\x98\xd8\x74\xac\xf9\x34\x29\x64\x34\x99\xb7\xa9\x45\x65\x4c\x57\x41\x7a\x6c\xe6\x36\xc0\xaf\x41\x6e\xcc\xe5\x01\x9a\x03\x87\xf2\x55\xbe\xc9\x60\x5a\x5d\xee\xc9\x52\x70\x13\xe4\x74\x18\xe2\xdc\x46\x2a\xd4\xcc\x4c\x94\x04\x88\x73\xe8\xa2\x45\x90\xaa\x6b\xb1\xe8\xab\x52\x9c\x80\xbb\xa0\x0a\x94\x45\x43\xc8\x38\x4a\xa8\x34\x1b\x0a\xb8\xe0\xb2\x32\x00\x14\x65\x55\xe6\x01\xdf\x5f\xf6\xf8\x24\xd8\x8e\x16\x3c\x78\x75\xa1\x96\xd4\x75\xbf\xac\x56\x41\x44\x6c\xa5\x77\x7b\x99\x87\x74\x9f\xa4\xb1\xb5\xa1\xc9\xb3\x3b\xbf\x96\x42\xd3\x7f\x66\xdc\x36\x36\x36\x8e\xd6\x82\x66\x79\x47\x64\x7f\xcf\x96\xca\x03\xd5\x9e\xf3\x75\xef\xb2\x56\x4d\xc0\x6f\x71\x4e\x1a\x87\x0b\x8c\xd5\xc0\xbb\x7c\xd3\x0c\xfb\x0d\xc6\x49\x23\x31\x65\xac\x6c\x76\x4e\xc4\xc2\xfa\x2d\x50\xdc\x7b\x5f\x35\x88\x31\xfa\xee\x36\x84\x8a\x38\xff\xea\xc3\x98\x46\xe2\x10\x7c\x14\x34\xac\x23\x22\x10\xfb\xb8\xa5\x2e\x39\x87\x60\xc6\x65\x4b\x75\xb4\x0f\xc1\x47\xf5\x25\xe7\x71\x80\xd4\xaa\xdd\x42\xa1\xb0\x05\x42\x46\x5d\x59\x8d\xd7\x20\x3b\x04\x82\x45\x68\xfa\x2e\xb2\xf4\x2f\x2f\x7f\x31\xb6\x94\xcf\x0c\x5d\xfa\xfd\xbf\xc4\x37\x5d\x0d\x2e\x79\x48\xa1\x95\xf8\x07\x1c\x89\x5e\xc2\x3c\x3f\xcb\x11\x5b\x60\xa7\x50\x28\x6c\x1c\xc9\xb4\x03\x96\x8e\xc1\x06\x17\x30\xbb\x8f\x8e\x91\xc9\x55\x9a\x00\xe9\x32\x95\xd9\x93\x0c\x6e\xb4\xcf\x17\xb3\xf8\x8c\x73\x5e\xe1\x5c\xfc\x0b\xff\x7a\xb3\xfe\xad\x9f\x2a\x8c\xc7\x63\xcd\xa5\xd4\xf5\x93\x1f\x29\xcc\x92\xa5\xcc\x23\xea\xc7\x08\x90\xc7\xc4\x02\x36\x72\x10\x9b\xff\x80\x20\xcb\xa0\x15\xdd\xa4\x76\xac\xfe\x0a\xad\x7e\x68\xf8\x3f\x01\x00\x00\xff\xff\xc4\x7e\x37\x96\x79\x28\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 10361, mode: os.FileMode(0664), modTime: time.Unix(1653306979, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0xf1, 0x71, 0x66, 0x62, 0x76, 0x8e, 0xce, 0xe7, 0xde, 0x64, 0xa4, 0x3f, 0xa0, 0xbb, 0xf9, 0xa6, 0xec, 0x3c, 0x54, 0x81, 0xcb, 0x7b, 0x4d, 0xce, 0xbd, 0x54, 0x12, 0x0, 0xf, 0x3b, 0xfa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
