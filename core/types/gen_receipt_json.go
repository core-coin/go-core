// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/core-coin/go-core/common"
	"github.com/core-coin/go-core/common/hexutil"
)

var _ = (*receiptMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		PostState            hexutil.Bytes  `json:"root"`
		Status               hexutil.Uint64 `json:"status"`
		CumulativeEnergyUsed hexutil.Uint64 `json:"cumulativeEnergyUsed" gencodec:"required"`
		Bloom                Bloom          `json:"logsBloom"         gencodec:"required"`
		Logs                 []*Log         `json:"logs"              gencodec:"required"`
		TxHash               common.Hash    `json:"transactionHash" gencodec:"required"`
		ContractAddress      common.Address `json:"contractAddress"`
		EnergyUsed           hexutil.Uint64 `json:"energyUsed" gencodec:"required"`
		BlockHash            common.Hash    `json:"blockHash,omitempty"`
		BlockNumber          *hexutil.Big   `json:"blockNumber,omitempty"`
		TransactionIndex     hexutil.Uint   `json:"transactionIndex"`
	}
	var enc Receipt
	enc.PostState = r.PostState
	enc.Status = hexutil.Uint64(r.Status)
	enc.CumulativeEnergyUsed = hexutil.Uint64(r.CumulativeEnergyUsed)
	enc.Bloom = r.Bloom
	enc.Logs = r.Logs
	enc.TxHash = r.TxHash
	enc.ContractAddress = r.ContractAddress
	enc.EnergyUsed = hexutil.Uint64(r.EnergyUsed)
	enc.BlockHash = r.BlockHash
	enc.BlockNumber = (*hexutil.Big)(r.BlockNumber)
	enc.TransactionIndex = hexutil.Uint(r.TransactionIndex)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		PostState            *hexutil.Bytes  `json:"root"`
		Status               *hexutil.Uint64 `json:"status"`
		CumulativeEnergyUsed *hexutil.Uint64 `json:"cumulativeEnergyUsed" gencodec:"required"`
		Bloom                *Bloom          `json:"logsBloom"         gencodec:"required"`
		Logs                 []*Log          `json:"logs"              gencodec:"required"`
		TxHash               *common.Hash    `json:"transactionHash" gencodec:"required"`
		ContractAddress      *common.Address `json:"contractAddress"`
		EnergyUsed           *hexutil.Uint64 `json:"energyUsed" gencodec:"required"`
		BlockHash            *common.Hash    `json:"blockHash,omitempty"`
		BlockNumber          *hexutil.Big    `json:"blockNumber,omitempty"`
		TransactionIndex     *hexutil.Uint   `json:"transactionIndex"`
	}
	var dec Receipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.PostState != nil {
		r.PostState = *dec.PostState
	}
	if dec.Status != nil {
		r.Status = uint64(*dec.Status)
	}
	if dec.CumulativeEnergyUsed == nil {
		return errors.New("missing required field 'cumulativeEnergyUsed' for Receipt")
	}
	r.CumulativeEnergyUsed = uint64(*dec.CumulativeEnergyUsed)
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Receipt")
	}
	r.Bloom = *dec.Bloom
	if dec.Logs == nil {
		return errors.New("missing required field 'logs' for Receipt")
	}
	r.Logs = dec.Logs
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	r.TxHash = *dec.TxHash
	if dec.ContractAddress != nil {
		r.ContractAddress = *dec.ContractAddress
	}
	if dec.EnergyUsed == nil {
		return errors.New("missing required field 'energyUsed' for Receipt")
	}
	r.EnergyUsed = uint64(*dec.EnergyUsed)
	if dec.BlockHash != nil {
		r.BlockHash = *dec.BlockHash
	}
	if dec.BlockNumber != nil {
		r.BlockNumber = (*big.Int)(dec.BlockNumber)
	}
	if dec.TransactionIndex != nil {
		r.TransactionIndex = uint(*dec.TransactionIndex)
	}
	return nil
}
