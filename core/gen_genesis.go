// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/core-coin/go-core/common"
	"github.com/core-coin/go-core/common/hexutil"
	"github.com/core-coin/go-core/common/math"
	"github.com/core-coin/go-core/params"
)

var _ = (*genesisSpecMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g Genesis) MarshalJSON() ([]byte, error) {
	type Genesis struct {
		Config      *params.ChainConfig                         `json:"config"`
		Nonce       math.HexOrDecimal64                         `json:"nonce"`
		Timestamp   math.HexOrDecimal64                         `json:"timestamp"`
		ExtraData   hexutil.Bytes                               `json:"extraData"`
		EnergyLimit math.HexOrDecimal64                         `json:"energyLimit"   gencodec:"required"`
		Difficulty  *math.HexOrDecimal256                       `json:"difficulty" gencodec:"required"`
		Coinbase    common.Address                              `json:"coinbase"`
		Alloc       map[common.UnprefixedAddress]GenesisAccount `json:"alloc"      gencodec:"required"`
		Number      math.HexOrDecimal64                         `json:"number"`
		EnergyUsed  math.HexOrDecimal64                         `json:"energyUsed"`
		ParentHash  common.Hash                                 `json:"parentHash"`
	}
	var enc Genesis
	enc.Config = g.Config
	enc.Nonce = math.HexOrDecimal64(g.Nonce)
	enc.Timestamp = math.HexOrDecimal64(g.Timestamp)
	enc.ExtraData = g.ExtraData
	enc.EnergyLimit = math.HexOrDecimal64(g.EnergyLimit)
	enc.Difficulty = (*math.HexOrDecimal256)(g.Difficulty)
	enc.Coinbase = g.Coinbase
	if g.Alloc != nil {
		enc.Alloc = make(map[common.UnprefixedAddress]GenesisAccount, len(g.Alloc))
		for k, v := range g.Alloc {
			enc.Alloc[common.UnprefixedAddress(k)] = v
		}
	}
	enc.Number = math.HexOrDecimal64(g.Number)
	enc.EnergyUsed = math.HexOrDecimal64(g.EnergyUsed)
	enc.ParentHash = g.ParentHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *Genesis) UnmarshalJSON(input []byte) error {
	type Genesis struct {
		Config      *params.ChainConfig                         `json:"config"`
		Nonce       *math.HexOrDecimal64                        `json:"nonce"`
		Timestamp   *math.HexOrDecimal64                        `json:"timestamp"`
		ExtraData   *hexutil.Bytes                              `json:"extraData"`
		EnergyLimit *math.HexOrDecimal64                        `json:"energyLimit"   gencodec:"required"`
		Difficulty  *math.HexOrDecimal256                       `json:"difficulty" gencodec:"required"`
		Coinbase    *common.Address                             `json:"coinbase"`
		Alloc       map[common.UnprefixedAddress]GenesisAccount `json:"alloc"      gencodec:"required"`
		Number      *math.HexOrDecimal64                        `json:"number"`
		EnergyUsed  *math.HexOrDecimal64                        `json:"energyUsed"`
		ParentHash  *common.Hash                                `json:"parentHash"`
	}
	var dec Genesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Config != nil {
		g.Config = dec.Config
	}
	if dec.Nonce != nil {
		g.Nonce = uint64(*dec.Nonce)
	}
	if dec.Timestamp != nil {
		g.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.ExtraData != nil {
		g.ExtraData = *dec.ExtraData
	}
	if dec.EnergyLimit == nil {
		return errors.New("missing required field 'energyLimit' for Genesis")
	}
	g.EnergyLimit = uint64(*dec.EnergyLimit)
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Genesis")
	}
	g.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Coinbase != nil {
		g.Coinbase = *dec.Coinbase
	}
	if dec.Alloc == nil {
		return errors.New("missing required field 'alloc' for Genesis")
	}
	g.Alloc = make(GenesisAlloc, len(dec.Alloc))
	for k, v := range dec.Alloc {
		g.Alloc[common.Address(k)] = v
	}
	if dec.Number != nil {
		g.Number = uint64(*dec.Number)
	}
	if dec.EnergyUsed != nil {
		g.EnergyUsed = uint64(*dec.EnergyUsed)
	}
	if dec.ParentHash != nil {
		g.ParentHash = *dec.ParentHash
	}
	return nil
}
