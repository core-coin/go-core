// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"

	"github.com/core-coin/go-core/common/hexutil"
	"github.com/core-coin/go-core/common/math"
)

var _ = (*stTransactionMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s stTransaction) MarshalJSON() ([]byte, error) {
	type stTransaction struct {
		EnergyPrice *math.HexOrDecimal256 `json:"energyPrice"`
		Nonce       math.HexOrDecimal64   `json:"nonce"`
		To          string                `json:"to"`
		Data        []string              `json:"data"`
		EnergyLimit []math.HexOrDecimal64 `json:"energyLimit"`
		Value       []string              `json:"value"`
		PrivateKey  hexutil.Bytes         `json:"secretKey"`
	}
	var enc stTransaction
	enc.EnergyPrice = (*math.HexOrDecimal256)(s.EnergyPrice)
	enc.Nonce = math.HexOrDecimal64(s.Nonce)
	enc.To = s.To
	enc.Data = s.Data
	if s.EnergyLimit != nil {
		enc.EnergyLimit = make([]math.HexOrDecimal64, len(s.EnergyLimit))
		for k, v := range s.EnergyLimit {
			enc.EnergyLimit[k] = math.HexOrDecimal64(v)
		}
	}
	enc.Value = s.Value
	enc.PrivateKey = s.PrivateKey
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *stTransaction) UnmarshalJSON(input []byte) error {
	type stTransaction struct {
		EnergyPrice *math.HexOrDecimal256 `json:"energyPrice"`
		Nonce       *math.HexOrDecimal64  `json:"nonce"`
		To          *string               `json:"to"`
		Data        []string              `json:"data"`
		EnergyLimit []math.HexOrDecimal64 `json:"energyLimit"`
		Value       []string              `json:"value"`
		PrivateKey  *hexutil.Bytes        `json:"secretKey"`
	}
	var dec stTransaction
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.EnergyPrice != nil {
		s.EnergyPrice = (*big.Int)(dec.EnergyPrice)
	}
	if dec.Nonce != nil {
		s.Nonce = uint64(*dec.Nonce)
	}
	if dec.To != nil {
		s.To = *dec.To
	}
	if dec.Data != nil {
		s.Data = dec.Data
	}
	if dec.EnergyLimit != nil {
		s.EnergyLimit = make([]uint64, len(dec.EnergyLimit))
		for k, v := range dec.EnergyLimit {
			s.EnergyLimit[k] = uint64(v)
		}
	}
	if dec.Value != nil {
		s.Value = dec.Value
	}
	if dec.PrivateKey != nil {
		s.PrivateKey = *dec.PrivateKey
	}
	return nil
}
